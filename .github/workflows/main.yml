name: main

on:
  push:
    branches:
      - master
      - main
  pull_request:


jobs:
  # Layer 0
  validate-pr:
    name: Validate PR title
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: amannn/action-semantic-pull-request@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Layer 1
  build-lambda:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-pr]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'

      - name: Install Tools
        run: make install_tools

      - name: Build Project
        run: make build

      - name: Run Tests
        run: make coverage

      - name: Run Linting
        run: make lint

  terraform-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-pr]
    env:
      working-directory: terraform

    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize
        working-directory: ${{ env.working-directory }}
        run: |
          terraform init -input=false -backend=false

      - name: Check Format
        working-directory: ${{ env.working-directory }}
        run: |
          terraform fmt -check -no-color

      - name: Validate
        working-directory: ${{ env.working-directory }}
        run: |
          terraform validate -no-color

  validate-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-pr]
    defaults:
      run:
        working-directory: pkg/configuration

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install jsonschema
        run: python -m pip install jsonschema

      - name: Validate Example Config
        run: jsonschema -i example_config.json schema.json

  validate-glue:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-pr]
    defaults:
      run:
        working-directory: glue

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Setup Pipenv
        run: pip install pipenv

      - name: Install Requirements
        run: pipenv install --dev

      - name: Lint
        run: pipenv run flake8


  # Layer 2
  deploy-lambda-execute-orders:
    needs: [build-lambda, terraform-lint, validate-config]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: "GithubAction"

      - name: Pack
        run: make pack_execute_orders

      - name: Upload
        run: >
          aws s3 cp function.zip s3://${{ secrets.AWS_LAMBDA_BUCKET }}/${{ secrets.AWS_LAMBDA_SCRIPT_PREFIX }}/${{ secrets.AWS_LAMBDA_EXECUTE_ORDERS_KEY }}

      - name: Deploy
        run: >
          aws lambda update-function-code
          --function-name ${{ secrets.AWS_LAMBDA_EXECUTE_ORDERS_NAME }}
          --s3-bucket ${{ secrets.AWS_LAMBDA_BUCKET }}
          --s3-key ${{ secrets.AWS_LAMBDA_SCRIPT_PREFIX }}/${{ secrets.AWS_LAMBDA_EXECUTE_ORDERS_KEY }}

  deploy-lambda-process-orders:
    needs: [build-lambda, terraform-lint, validate-config]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: "GithubAction"

      - name: Pack
        run: make pack_process_orders

      - name: Upload
        run: >
          aws s3 cp function.zip s3://${{ secrets.AWS_LAMBDA_BUCKET }}/${{ secrets.AWS_LAMBDA_SCRIPT_PREFIX }}/${{ secrets.AWS_LAMBDA_PROCESS_ORDERS_KEY }}

      - name: Deploy
        run: >
          aws lambda update-function-code
          --function-name ${{ secrets.AWS_LAMBDA_PROCESS_ORDERS_NAME }}
          --s3-bucket ${{ secrets.AWS_LAMBDA_BUCKET }}
          --s3-key ${{ secrets.AWS_LAMBDA_SCRIPT_PREFIX }}/${{ secrets.AWS_LAMBDA_PROCESS_ORDERS_KEY }}

  deploy-glue:
    needs: [validate-glue, validate-config, terraform-lint]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: glue

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: "GithubAction"

      - name: Deploy
        run: |
          aws s3 sync scripts s3://${{ secrets.AWS_GLUE_BUCKET }}/${{ secrets.AWS_GLUE_SCRIPT_PREFIX }}

    # Layer 3
